#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('express-session-sample:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
// --------------------------------------------------------------
// var server = require('http').Server(app);
var io = require('socket.io')(server);

// 接続確立後の通信処理部分を定義
io.on('connection', function(socket) {

  // クライアントからサーバーへ メッセージ送信ハンドラ（自分を含む全員宛に送る）
  socket.on('c2s_update', function(data) {
    // サーバーからクライアントへ メッセージを送る
    if (data.angle) {
      io.sockets.emit('s2c_update', {
        id: data.id,
        user: data.user,
        posX: data.posX,
        posY: data.posY,
        type: data.type,
        color: data.color,
        angle: data.angle,
      });
    } else {
      io.sockets.emit('s2c_update', {
        id: data.id,
        user: data.user,
        posX: data.posX,
        posY: data.posY,
        type: data.type,
        color: data.color,
      });
    }
  });
  socket.on('c2s_bullet', function(data) {
    // サーバーからクライアントへ メッセージを送る
    io.sockets.emit('s2c_bullet', {
      id: data.id,
      user: data.user,
    });
  });

});
// --------------------------------------------------------------

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
